---
import { Image } from "astro:assets";
import logo from "/public/images/svg/logo-tenbeltz-navbar.svg"
import { ReactComponent as OpenHamburgerMenu } from "/public/images/svg/bars-3.svg";
import { ReactComponent as CloseHamburgerMenu } from "/public/images/svg/x-mark.svg";

interface NavElement {
  title: string;
  href: string;
}

const navElements: NavElement[] = [
  { title: 'Home', href: '/' },
  { title: 'Services', href: '/#offer' },
  { title: 'About us', href: '/#about-us' },
  { title: 'Portfolio', href: '/#portfolio' },
  // { title: 'Partners', href: '#' },
  { title: 'Contact', href: '/#contact-section' },
  { title: 'Pricing', href: '/pricing' },
  { title: 'Customers', href: '/#' },
]
---

<header class="fixed z-20 w-full text-white">
  <div class="transition-colors duration-500 backdrop-blur-lg bg-obsidian-shard/50">
    <div class="flex items-center justify-between px-4 py-5 mx-auto max-w-screen-2xl lg:px-12 lg:py-3">
      <div id="logo-container" class="flex items-center justify-center">
        <a href="/">
          <Image alt="logo" src={logo} />
        </a>
      </div>

      <a id="customers-button" href={navElements.find(({ title }) => title === "Customers")?.href} class="hidden px-4 py-2 rounded-md lg:flex bg-pheromone-purple w-fit">Customers</a>
      
      <div id="menu-container" class="flex items-center justify-center lg:hidden">
        <OpenHamburgerMenu id="open-hamburger-menu" width="36" height="36" fill="#ffffff" className="size-8" stroke="currentColor" strokeWidth="1.5" />
      </div>
    </div>
  
    <div id="navbar-container" class="fixed inset-0 items-center justify-center w-full h-screen px-4 overflow-y-scroll transition-transform duration-500 translate-x-full lg:static lg:inset-auto scrollbar-hidden backdrop-blur-lg lg:translate-x-0 lg:px-0 bg-obsidian-shard/50 lg:backdrop-blur-none lg:w-auto lg:h-auto lg:bg-transparent lg:flex">
      <div class="flex justify-between py-5 lg:hidden">
        <a href="/">
          <Image alt="logo" src={logo} />
        </a>
        <CloseHamburgerMenu id="close-hamburger-menu" width="36" height="36" fill="#ffffff" strokeWidth="1.5" stroke="currentColor" className="hidden size-8" />
      </div>
      <nav class="py-12 lg:py-0">
        <ul class="flex flex-col text-lg lg:items-center gap-y-2 gap-x-5 lg:flex-row lg:text-base">
          {navElements.map(({ href, title }) => (
            <li>
              <a href={href} class={`whitespace-nowrap block px-2 py-1.5 ${title === 'Customers' ? 'lg:hidden' : ''} ${title === 'Customers' ? 'border-t pt-3.5' : ''}`}>{title}</a>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  </div>
</header>

<script>
  const navbarContainer = document.getElementById('navbar-container') as HTMLDivElement;
  const logoContainer = document.getElementById('logo-container') as HTMLDivElement;
  const openMenuButton = document.getElementById('open-hamburger-menu') as SVGSVGElement | null;
  const closeMenuButton = document.getElementById('close-hamburger-menu') as SVGSVGElement | null;
  
  function adjustNavbarLayout(): void {
    const header = document.querySelector("header")?.firstElementChild;

    if (window.innerWidth >= 1024) {
      logoContainer?.parentElement?.insertBefore(navbarContainer, logoContainer.nextSibling);
    } else {
      document.querySelector('header')?.appendChild(navbarContainer);
    }

    if (navbarContainer?.parentElement === document.querySelector('header')) {
      if (!navbarContainer.classList.contains('translate-x-full')) {
        header?.classList.remove('bg-obsidian-shard/50');
      }
    } else {
      header?.classList.add('bg-obsidian-shard/50');
    }
  }

  function debounce(callback: Function, wait: number): (...args: any[]) => void {
    let timeoutId: ReturnType<typeof setTimeout> | null = null;
    return (...args: any[]) => {
      if (timeoutId) clearTimeout(timeoutId);
      timeoutId = window.setTimeout(() => callback(...args) , wait);
    };
  }

  function toggleHamburgerMenu(): void {
    navbarContainer?.classList.toggle('translate-x-full');
    openMenuButton?.classList.toggle('hidden');
    closeMenuButton?.classList.toggle('hidden');
    document.querySelector('header')?.firstElementChild?.classList.toggle('bg-obsidian-shard/50');
  }

  if (openMenuButton && closeMenuButton) {
    openMenuButton.addEventListener('click', () => toggleHamburgerMenu());
    closeMenuButton.addEventListener('click', () => toggleHamburgerMenu());
  } else {
    console.error("Hamburger menu buttons are missing.");
  }

  const debouncedAdjustNavbarLayout = debounce(adjustNavbarLayout, 50);
  adjustNavbarLayout();
  
  window.addEventListener('resize', debouncedAdjustNavbarLayout);

  window.addEventListener('pagehide', () => {
    if (openMenuButton) openMenuButton.removeEventListener("click", toggleHamburgerMenu);
    if (closeMenuButton) closeMenuButton.removeEventListener("click", toggleHamburgerMenu);
    window.removeEventListener("resize", debouncedAdjustNavbarLayout);
  });
</script>