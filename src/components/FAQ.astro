---
import { ReactComponent as ChevronDown } from "/public/images/svg/chevron-down.svg";

interface FAQ {
  question: string;
  answer: string;
}

const FAQs: FAQ[] = [
  { 
    question: 'How can AI integration benefit my business, and what specific AI services do you provide?',
    answer: 'AI can automate tasks, improve decision-making, and enhance customer experiences. We offer AI chatbots, predictive analytics, and machine learning solutions.',
  },
  { 
    question: 'What data science services do you offer, and how can they help improve my business operations?',
    answer: 'We provide data analysis, visualization, and predictive modeling to help you make data-driven decisions and optimize operations.',
  },
  { 
    question: 'What is your typical project timeline from initial consultation to final delivery?',
    answer: 'Our project timelines vary, but typically range from 4 to 12 weeks depending on the complexity of the project.',
  },
  { 
    question: 'What is your approach to ensuring project success and client satisfaction?',
    answer: 'We ensure project success and client satisfaction through clear communication, tailored solutions, agile methodology, rigorous quality assurance, and ongoing support.',
  },
  { 
    question: 'How do you ensure the security and privacy of the data used in your projects?',
    answer: 'We implement robust security measures, including encryption, regular audits, and compliance with data protection regulations.',
  },
  { 
    question: 'What types of web development services do you offer?',
    answer: 'We offer custom software development, web and mobile development, and cloud solutions. Our expertise includes front-end, back-end, and full-stack development, as well as internal management tools tailored to your business needs. Additionally, we provide graphic design services to enhance your digital presence.',
  },
]
---

<section>
  <div class="flex flex-col items-center justify-center px-4 py-20 text-white gap-y-16 lg:px-16">
    <div class="flex flex-col max-w-2xl text-center gap-y-7">
      <h2 class="text-4xl font-bold">Frequently Asked Questions</h2>
      <p class="text-slate-400">
        Have a different question and can't find the answer you're looking for? Reach out to our support team by 
        <a href="#contact-section" class="font-bold text-pheromone-purple">sending us an email</a> and we'll get back to you as soon as we can.
      </p>
    </div>
    <div class="grid lg:grid-cols-2 gap-x-40 gap-y-6 lg:gap-y-14">
      {FAQs.map(({ question, answer }) => (
        <div class="faq-item cursor-pointer lg:cursor-auto flex flex-col max-w-md overflow-hidden">
          <p class="flex text-lg font-semibold gap-x-1">
            <span>{question}</span>
            <span>
              <ChevronDown
                width="24"
                height="24"
                fill="none"
                strokeWidth="1.5"
                stroke="currentColor"
                className="size-6 lg:hidden transform transition-transform duration-200"
              />
            </span>
          </p>
          <p class="faq-answer text-slate-400 max-h-0 lg:max-h-max pt-6 overflow-hidden transition-all ease-in-out duration-200">{answer}</p>
        </div>
      ))}
    </div>
  </div>
</section>

<script>
  function initializeFAQ() {
    const faqItems: NodeListOf<Element> = document.querySelectorAll('.faq-item');

    const toggleAnswer = (item: Element, answer: HTMLParagraphElement) => {
      const chevron = item.querySelector('svg');

      const isOpen = answer.style.maxHeight && answer.style.maxHeight !== '0px';
      answer.style.maxHeight = isOpen ? '0px' : `${answer.scrollHeight}px`;

      if (chevron) {
        chevron.classList.toggle('rotate-180', !isOpen);
      }
    };

    const handleResize = () => {
      faqItems.forEach(item => {
        const answer = item.querySelector('.faq-answer') as HTMLParagraphElement;
        if (window.innerWidth >= 1024) {
          answer.style.maxHeight = `${answer.scrollHeight}px`;
        } else {
          answer.style.maxHeight = '0px';
        }
      });
    };

    const debounce = (func: (...args: any[]) => void, wait: number) => {
      let timeout: ReturnType<typeof setTimeout>;
      return function(this: any, ...args: any[]) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    };

    window.addEventListener('resize', debounce(handleResize, 200));

    faqItems.forEach(item => {
      const answer = item.querySelector('.faq-answer') as HTMLParagraphElement;

      item.addEventListener('click', () => {
        if (window.innerWidth < 1024 && answer) {
          toggleAnswer(item, answer);
        }
      });
    });

    handleResize();
  }

  window.addEventListener('DOMContentLoaded', initializeFAQ);
</script>